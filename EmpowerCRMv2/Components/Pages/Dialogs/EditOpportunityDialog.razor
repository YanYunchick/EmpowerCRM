@inject IOpportunityService OpportunityService
@inject IContactService ContactService

<MudDialog>
    <DialogContent>
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Name"
                                  @bind-Value="model.Name" For="@(() => model.Name)" />
                    <MudNumericField Format="0.##" @bind-Value="model.Amount" Label="Amount" Variant="Variant.Outlined" Min="0" Max="999999" />
                    @if(isAddOpportunitiesPage)
                    {
                        <MudSelect T="int" @bind-Value="model.ContactId" Label="Contact" AnchorOrigin="Origin.BottomCenter">
                            @foreach (Contact contact in contacts)
                            {
                                <MudSelectItem Value="@contact.Id">@contact.FirstName @contact.LastName</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    
                    <MudSelect T="int?" @bind-Value="model.StageId" Label="Stage" AnchorOrigin="Origin.BottomCenter">
                        @foreach(OpportunityStage stage in opportunityStages)
                        {
                            <MudSelectItem T="int?" Value="@stage.Id">@stage.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudDatePicker PickerVariant="PickerVariant.Inline" AnchorOrigin="Origin.BottomCenter" Label="Close Date" @bind-Date="@model.CloseDate"
                                   @bind-Value="model.CloseDate" For="@(() => model.CloseDate)" />
                    
                </MudCardContent>
                <MudCardActions>
                    <MudSpacer />
                    <MudButton OnClick="Cancel" Class="mx-1">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                               Color="Color.Primary">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private Opportunity model = new Opportunity();
    [Parameter] public Opportunity Opportunity { get; set; }
    [Parameter] public bool isAddOpportunitiesPage { get; set; }
    List<OpportunityStage> opportunityStages = new List<OpportunityStage>();
    List<Contact> contacts = new List<Contact>();

    //protected override async Task OnInitializedAsync()
    //{
    //   opportunityStages = await OpportunityService.GetOpportunityStagesAsync();
    //}

    override protected async Task OnParametersSetAsync()
    {
        if (isAddOpportunitiesPage)
        {
            contacts = await ContactService.GetAllContactItemsAsync();
            if (contacts.Any())
            {
                model.ContactId = contacts.FirstOrDefault()!.Id;
            }
        }
        if (Opportunity is not null)
        {
            model.Id = Opportunity.Id;
            model.Name = Opportunity.Name;
            model.StageId = Opportunity.StageId;
            model.Amount = Opportunity.Amount;
            model.CloseDate = Opportunity.CloseDate;
            model.LastModifiedDate = Opportunity.LastModifiedDate;
            model.CreatedDate = Opportunity.CreatedDate;
            model.ContactId = Opportunity.ContactId;
        }
        opportunityStages = await OpportunityService.GetOpportunityStagesAsync();
        StateHasChanged();
    }

    void Cancel() => MudDialog.Cancel();

    private async void OnValidSubmit(EditContext context)
    {
        if (model.Id == 0 && model is not null)
        {
            await OpportunityService.AddOpportunityItemAsync(model);
        }
        else if (model!.Id != 0 && model is not null)
        {
            await OpportunityService.UpdateOpportunityItemAsync(model);
        }
        MudDialog.Close(DialogResult.Ok(model));
    }
}