@inject IOpportunityService OpportunityService

<MudDialog>
    <DialogContent>
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudSelect T="int" @bind-Value="model.ProductId" Label="Product" AnchorOrigin="Origin.BottomCenter">
                        @foreach (Product product in products)
                        {
                            <MudSelectItem Value="@product.Id">@product.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudNumericField @bind-Value="model.Quantity" Label="Quantity" Variant="Variant.Outlined" Min="1" Max="9999" />
                    <MudNumericField @bind-Value="model.Price" Label="Price" Variant="Variant.Outlined" Min="0" />
                </MudCardContent>
                <MudCardActions>
                    <MudSpacer />
                    <MudButton OnClick="Cancel" Class="mx-1">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                               Color="Color.Primary" Disabled="@(!products.Any())">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    OpportunityProduct model = new OpportunityProduct();
    List<Product> products = new List<Product>();
    [Parameter] public Opportunity CurrentOpportunity { get; set; }

    override protected async Task OnParametersSetAsync()
    {
        var result = await OpportunityService.GetAllProductItemsAsync();
        products = result.Except(CurrentOpportunity.Products ?? new List<Product>()).ToList();
        if(products.Any())
        {
            model.ProductId = products.FirstOrDefault()!.Id;
        }
    }

    void Cancel() => MudDialog.Cancel();

    private async void OnValidSubmit(EditContext context)
    {
        if (model is not null)
        {
            model.OpportunityId = CurrentOpportunity.Id;
            await OpportunityService.AddOpportunityProductItemAsync(model);
        }
        MudDialog.Close(DialogResult.Ok(model));
    }
}
