@page "/contacts"
@rendermode InteractiveServer
@inject IContactService ContactService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize]

<style>
    .selected {
        background-color: #e1e1e6 !important;
    }

    .selected > td {
        color: black !important;
    }

    .selected > td .mud-input {
        color: black !important;
    }
</style>

@if(contactItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable 
        T="Contact"
        Items="@contactItems" 
        Dense="@dense" 
        Hover="@hover" 
        Bordered="@bordered" 
        Striped="@striped"
        SortLabel="Sort By"
        Filter="new Func<Contact,bool>(FilterFunc1)" 
        @bind-SelectedItem="selectedItem1"
        RowClass="cursor-pointer"
        RowClassFunc="@SelectedRowClassFunc"
        OnRowClick="@(args => RowClickEvent(args))"
        @ref="mudTable">
        <ToolBarContent>
            <div class="d-block">
                <MudText Typo="Typo.h6">Contacts</MudText>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"
                           @onclick="@(() => DeleteContactItem(@selectedItem1.Id))"
                           Disabled="@(selectedItem1 is null)">Delete</MudButton>
                <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Primary"
                           OnClick="OpenEditDialog" Disabled="@(selectedItem1 is null)">Edit</MudButton>
                <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="OpenCreateDialog">New</MudButton>
            </div>
            <MudSpacer />
            <MudTextField 
                @bind-Value="searchString1" 
                Placeholder="Search" 
                Adornment="Adornment.Start" 
                AdornmentIcon="@Icons.Material.Filled.Search" 
                IconSize="Size.Medium" 
                Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Contact, object>(x=>x.FirstName+x.LastName)">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Contact, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Contact, object>(x=>x.Phone)">Phone</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Contact, object>(x=>x.Address)">Address</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Contact, object>(x=>x.Company)">Company</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Contact, object>(x=>x.Owner.Email)">Owner</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
                <MudTd DataLabel="Name">
                    <MudLink Href="@($"/contact/{context.Id}")">@context.FirstName @context.LastName</MudLink>
                </MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Phone">@context.Phone</MudTd>
                <MudTd DataLabel="Address">@context.Address</MudTd>
                <MudTd DataLabel="Company">@context.Company</MudTd>
                <MudTd DataLabel="Owner">
                    <MudLink Href="@($"/Account/Manage")">@context.Owner.Email</MudLink>
                </MudTd>    
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="@pageSizes"/>
        </PagerContent>
    </MudTable> 

    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
        <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
        <MudSpacer />
        <div style="min-width:200px;">
            <MudText Inline="true" Class="align-self-center">Selected1: @selectedItem1?.LastName</MudText>
        </div>
    </div>
}

@code {
    private int selectedRowNumber = -1;
    private MudTable<Contact> mudTable;
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private int[] pageSizes = { 5, 10, 25, 100, int.MaxValue };
    private Contact selectedItem1 = null;
    private HashSet<Contact> selectedItems = new HashSet<Contact>();
    private List<Contact> contactItems = new List<Contact>();

    protected override async Task OnInitializedAsync()
    {
        contactItems = await ContactService.GetAllContactItemsAsync();
    }

    async Task DeleteContactItem(int id)
    {
        selectedItem1 = null;
        await ContactService.DeleteContactItemAsync(id);
        contactItems = await ContactService.GetAllContactItemsAsync();
        Snackbar.Add($"The contact has been removed successfully", Severity.Success);
    }

    private bool FilterFunc1(Contact contact) => FilterFunc(contact, searchString1);

    private bool FilterFunc(Contact contact, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (contact.FirstName!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (contact.LastName!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (contact.Email!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void RowClickEvent(TableRowClickEventArgs<Contact> tableRowClickEventArgs)
    {
       
    }

    private string SelectedRowClassFunc(Contact element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            selectedItem1 = null;
            StateHasChanged();
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private async void OpenCreateDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<EditContactDialog>("Create contact", closeOnEscapeKey);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            contactItems = await ContactService.GetAllContactItemsAsync();
            Snackbar.Add($"New contact has been added successfully", Severity.Success);
            StateHasChanged();
        }
    }

    private async void OpenEditDialog()
    {
        var parameters = new DialogParameters { ["contact"] = selectedItem1 };

        var dialog = await DialogService.ShowAsync<EditContactDialog>("Edit contact", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            contactItems = await ContactService.GetAllContactItemsAsync();
            Snackbar.Add($"The contact has been updated successfully", Severity.Success);
            StateHasChanged();
        }
    }

}