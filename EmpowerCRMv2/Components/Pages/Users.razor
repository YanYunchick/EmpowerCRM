@page "/users"
@using EmpowerCRMv2.Data
@rendermode InteractiveServer
@inject IUserService UserService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationState
@attribute [Authorize(Roles ="Administrator")]

<MudDataGrid T="ApplicationUser" Items="@users" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <div class="d-block">
            <MudText Typo="Typo.h6">Users</MudText>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Href="/Account/Register">New User</MudButton>
        </div>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.UserName" Title="Name" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.PhoneNumber" Title="Phone" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton OnClick="@(() => DeleteUser(context.Item))"
                                   Icon="@Icons.Material.Filled.Delete" aria-label="delete" Disabled="@(context.Item.UserName == userName)">
                    </MudIconButton>
                    <MudIconButton OnClick="@(() => OpenChangeRoleDialog(context.Item))"
                                   Icon="@Icons.Material.Filled.People" aria-label="edit">
                    </MudIconButton>
                    <MudIconButton OnClick="@(() => OpenChangePasswordDialog(context.Item))"
                                   Icon="@Icons.Material.Filled.Password" aria-label="edit">
                    </MudIconButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ApplicationUser" />
    </PagerContent>
</MudDataGrid>
@code {
    private List<ApplicationUser> users = new List<ApplicationUser>();
    private string? userName;
    private string _searchString;

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAllUsersAsync();
        var authstate = await AuthenticationState.GetAuthenticationStateAsync();
        var user = authstate.User;
        userName = user.Identity?.Name;
    }

    private Func<ApplicationUser, object> _sortBy => x => x.UserName;
    private Func<ApplicationUser, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    async Task DeleteUser(ApplicationUser user)
    {
        await UserService.DeleteUserAsync(user.Id);
        users = await UserService.GetAllUsersAsync();
    }


    private async void OpenChangeRoleDialog(ApplicationUser user)
    {
        var parameters = new DialogParameters { ["User"] = user };

        var dialog = await DialogService.ShowAsync<ChangeUserRoleDialog>("Change Role", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            users = await UserService.GetAllUsersAsync();
            Snackbar.Add($"User has been updated successfully", Severity.Success);
            StateHasChanged();
        }
    }

    private async void OpenChangePasswordDialog(ApplicationUser user)
    {
        var parameters = new DialogParameters { ["User"] = user };

        var dialog = await DialogService.ShowAsync<ChangeUserPasswordDialog>("Change Password", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            users = await UserService.GetAllUsersAsync();
            Snackbar.Add($"Password has been updated successfully", Severity.Success);
            StateHasChanged();
        }
    }
}
