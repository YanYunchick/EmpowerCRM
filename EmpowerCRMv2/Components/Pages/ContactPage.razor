@page "/contact/{Id:int}"
@rendermode InteractiveServer
@inject IContactService ContactService
@inject IOpportunityService OpportunityService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@attribute [Authorize]

<MudStack Row="true" Spacing="0">
    <MudIcon Icon="@Icons.Material.Filled.ContactPage" Color="Color.Primary" Size="Size.Large"></MudIcon>
    <MudText Typo="Typo.h5" Class="pt-1">Contact</MudText>
</MudStack>
<MudCard>
    <MudCardContent>
        @if (currentContact is not null)
        {
            <MudStack Row="true" Spacing="0">
                <MudText Heading="h3"><b>@currentContact.FirstName @currentContact.LastName</b></MudText>
                <MudSpacer />
                <MudButton Color="Color.Error" @onclick="@(() => ConfirmDelete())">Delete</MudButton>
                <MudButton Color="Color.Primary" OnClick="OpenEditDialog">Edit</MudButton>
                <AuthorizeView Roles="Administrator">
                    <MudButton Color="Color.Primary" OnClick="OpenChangeOwnerDialog">Change Owner</MudButton>
                </AuthorizeView>
            </MudStack>
            <MudDivider DividerType="DividerType.FullWidth" Class="my-3" Light/>

            <MudStack Row="true" Spacing="3">
                <MudPaper>
                    <MudText Class="mx-2" Color="Color.Primary" Style="font-size: 12px;">Email</MudText>
                    <MudText Class="mx-3">@currentContact.Email</MudText>
                </MudPaper>
                <MudPaper>
                    <MudText Class="mx-2" Color="Color.Primary" Style="font-size: 12px;">Phone</MudText>
                    <MudText Class="mx-3">@currentContact.Phone</MudText>
                </MudPaper>
                <MudPaper>
                    <MudText Class="mx-2" Color="Color.Primary" Style="font-size: 12px;">Company</MudText>
                    <MudText Class="mx-3">@currentContact.Company</MudText>
                </MudPaper>
                <MudPaper>
                    <MudText Class="mx-2" Color="Color.Primary" Style="font-size: 12px;">Address</MudText>
                    <MudText Class="mx-3">@currentContact.Address</MudText>
                </MudPaper>
                <MudPaper>
                    <MudText Class="mx-2" Color="Color.Primary" Style="font-size: 12px;">Owner</MudText>
                    <MudText Class="mx-3">@currentContact.Owner?.UserName</MudText>
                </MudPaper>
            </MudStack>
        }
        else
        {
            <MudText>Contact not found.</MudText>
        }
    </MudCardContent>
</MudCard>

@if (currentContact is not null && currentContact.Opportunities is not null)
{
    <MudGrid Class="my-4">
        <MudItem xs="6" md="8">
            <MudPaper>
                <MudStack Row="true" Spacing="0">
                    <MudIcon Icon="@Icons.Material.Filled.BusinessCenter" Color="Color.Primary" Size="Size.Medium" Class="pt=3"></MudIcon>
                    <MudText Typo="Typo.h6">Opportunities</MudText>
                    <MudSpacer/>
                    <MudButton Class="ma-1" Color="Color.Primary" OnClick="OpenAddOpportunityDialog">Add</MudButton>
                </MudStack>
                <MudStack Wrap="Wrap.Wrap" Row="true">
                    @foreach (Opportunity opp in currentContact.Opportunities)
                    {
                        <MudPaper Height="200px" Width="380px" Class="ma-1 pa-1">
                            <MudLink Href="@($"/opportunity/{opp.Id}")">@opp.Name</MudLink>
                            <MudDivider DividerType="DividerType.FullWidth" Class="my-1" Light />
                            <MudPaper Class="ma-1" Outlined="false" Elevation="0">
                                <MudText Typo="Typo.h5" Color="Color.Primary">Amount</MudText>
                                <MudStack Row="true">  
                                    <MudText Typo="Typo.h4" Color="Color.Success"><b>$@opp.Amount</b></MudText>
                                </MudStack>
                            </MudPaper>
                            <MudDivider DividerType="DividerType.FullWidth" Class="my-1" Light />
                            <MudPaper Class="ma-1" Outlined="false" Elevation="0">
                                <MudText Typo="Typo.h6" Color="Color.Primary">Stage</MudText>
                                <MudChip Size="Size.Large" Color="Color.Tertiary">@opp.Stage.Name</MudChip>
                            </MudPaper>
                        </MudPaper>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="6" md="4">
            <MudPaper>
                @if(currentContact.Opportunities.Any())
                {
                    <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@opportunityAmounts" InputLabels="@opportunityNames">
                        <CustomGraphics>
                            <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Total</text>
                            <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="3">$@currentContact.Opportunities.Sum(item => item.Amount)</text>
                        </CustomGraphics>
                    </MudChart>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
}
@code {
    [Parameter]
    public int Id { get; set; }

    public Contact currentContact { get; set; }
    public string?[] opportunityNames { get; set; }
    public double[] opportunityAmounts { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        var contactItem = await ContactService.GetContactItemByIdAsync((int)Id);
        if (contactItem is not null)
        {
            currentContact = contactItem;
            opportunityNames = currentContact.Opportunities.Select(opportunity => opportunity.Name).ToArray();
            opportunityAmounts = currentContact.Opportunities.Select(opportunity => (double)opportunity.Amount).ToArray();

        }
    }

    private async void OpenEditDialog()
    {
        var parameters = new DialogParameters { ["Contact"] = currentContact };

        var dialog = await DialogService.ShowAsync<EditContactDialog>("Edit Contact", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            currentContact = await ContactService.GetContactItemByIdAsync(Id);
            Snackbar.Add($"The contact has been updated successfully", Severity.Success);
            StateHasChanged();
        }
    }

    private async void OpenChangeOwnerDialog()
    {
        var parameters = new DialogParameters { ["Contact"] = currentContact };

        var dialog = await DialogService.ShowAsync<ChangeContactOwnerDialog>("Change Contact Owner", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            currentContact = await ContactService.GetContactItemByIdAsync(Id);
            Snackbar.Add($"The owner has been updated successfully", Severity.Success);
            StateHasChanged();
        }
    }

    async Task DeleteContactItem()
    {
        await ContactService.DeleteContactItemAsync(Id);
        Snackbar.Add($"The contact has been removed successfully", Severity.Success);
        NavigationManager.NavigateTo("contacts");
    }

    private async void ConfirmDelete()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete", cancelText: "Cancel");
        bool isConfirmed = result == null ? false : true;
        if (isConfirmed)
        {
            await DeleteContactItem();
            StateHasChanged();
        }
    }

    private async void OpenAddOpportunityDialog()
    {
        var parameters = new DialogParameters { ["ContactId"] = currentContact.Id };

        var dialog = await DialogService.ShowAsync<EditOpportunityDialog>("Create Opportunity", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var contactItem = await ContactService.GetContactItemByIdAsync((int)Id);
            opportunityNames = currentContact.Opportunities.Select(opportunity => opportunity.Name).ToArray();
            opportunityAmounts = currentContact.Opportunities.Select(opportunity => (double)opportunity.Amount).ToArray();
            Snackbar.Add($"New opportunity has been added successfully", Severity.Success);
            StateHasChanged();
        }
    }
}
